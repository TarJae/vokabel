% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/state-machine.R
\name{sm_get_state}
\alias{sm_get_state}
\alias{sm_set_state}
\alias{sm_is_current_correct}
\alias{sm_check_is_each_correct}
\alias{sm_is_all_correct}
\alias{sm_quiz_in_sandbox_mode}
\alias{sm_quiz_is_complete}
\alias{sm_logic_end_on_first_wrong}
\alias{sm_ui_format_prompts}
\alias{sm_ui_format_prompt}
\alias{sm_ui_quiz_complete}
\alias{sm_ui_complete_report}
\alias{sm_ui_question}
\alias{sm_show_progress}
\alias{sm_resample_questions_if_sandbox}
\alias{sm_create_reactive_store}
\alias{sm_score_quiz}
\alias{sm_summary}
\title{Functions for managing the quiz state machine}
\usage{
sm_get_state(store, variable = NULL, state = NULL)

sm_set_state(store, variable, value, state = NULL)

sm_is_current_correct(store)

sm_check_is_each_correct(store)

sm_is_all_correct(store)

sm_quiz_in_sandbox_mode(store)

sm_quiz_is_complete(store)

sm_logic_end_on_first_wrong(store)

sm_ui_format_prompts(quiz)

sm_ui_format_prompt(prompt, i)

sm_ui_quiz_complete(store, ns, messages)

sm_ui_complete_report(store)

sm_ui_question(store, ns)

sm_show_progress(store)

sm_resample_questions_if_sandbox(quiz, n = 50)

sm_create_reactive_store(quiz)

sm_score_quiz(store)

sm_summary(store, quiz)
}
\arguments{
\item{store}{a list formatted like in the example}

\item{variable}{one of c('current-question', 'current-correct-answer', 'next-state', 'current-response')}

\item{state}{one of c('quiz-question-1', ..., 'quiz-question')}

\item{quiz}{an object of class 'quiz'}

\item{n}{Number of resamples to make}
}
\value{
depends on function

questions

reactiveValues
}
\description{
The quiz is implemented via a state machine framework. It has states for each question and a final state for once the quiz ends. Only one state can be active at a time. The question text and answers shown depend on which state is active.
}
\details{
These are \code{get} and \code{set} functions for retrieving state values and setting values. The states are originally created via a \code{reactiveValues} call within Shiny server (or \code{list} outside of Shiny; see example below).
}
\section{Functions}{
\itemize{
\item \code{sm_get_state()}: Getter function for the state machine

\item \code{sm_set_state()}: Setter function for the state machine

\item \code{sm_is_current_correct()}: Check that current-response is correct

\item \code{sm_check_is_each_correct()}: Check that each recorded answer is correct and return a boolean vector

\item \code{sm_is_all_correct()}: Check that all recorded answers are correct

\item \code{sm_quiz_in_sandbox_mode()}: Check if the quiz in sandbox mode

\item \code{sm_quiz_is_complete()}: Check if the quiz is complete

\item \code{sm_logic_end_on_first_wrong()}: Check if the quiz should end early if user fails a question

\item \code{sm_ui_format_prompts()}: Add headers containing the question number to all the questions in a quiz

\item \code{sm_ui_format_prompt()}: Add a header denoting the question number

\item \code{sm_ui_quiz_complete()}: UI to show once the quiz is completed

\item \code{sm_ui_complete_report()}: UI to show the score and table of correct answers to display at the end

\item \code{sm_ui_question()}: UI to show for the current question

\item \code{sm_show_progress()}: Show the progress bar if stipulated

\item \code{sm_resample_questions_if_sandbox()}: Create quasi infinite quiz by resampling questions n times

\item \code{sm_create_reactive_store()}: Create the main store object that handles the state(s)

\item \code{sm_score_quiz()}: Calculate the percent of questions correct

\item \code{sm_summary()}: Generate a summary of the quiz to output from the Shiny module

}}
\examples{
\dontrun{
quiz <- create_quiz(
  create_question(
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Select nulla.',
    add_choice('auctor'),
    add_choice('nulla', correct = TRUE)
  ),
  create_question(
    'Mauris congue aliquet dui, ut dapibus lorem porttitor sed. Select 600.',
    add_choice('600', correct = TRUE),
    add_choice('800')
  )
)
store <- sm_create_reactive_store(quiz)
sm_get_state(store)
sm_get_state(store, 'next-state')
sm_get_state(store, 'current-question')
sm_check_is_each_correct(store)
sm_quiz_in_sandbox_mode(store)
}
}
\seealso{
\code{\link[shiny:reactiveValues]{shiny::reactiveValues()}}
}
\author{
Joseph Marlo
}
\keyword{internal}
